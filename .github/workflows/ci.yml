name: CI

on:
  push:
    branches: [master]
    tags:
      - v*.*.*
  pull_request:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.friendlyName }}
    #env:
      #DISPLAY: ":99.0"
      #CC: "clang"
      #CXX: "clang++"
      #npm_config_clang: "1"

    strategy:
      fail-fast: false
      matrix:
        node-version: [22.x]
        os: [ubuntu-20.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-20.04
            friendlyName: Ubuntu
          - os: windows-latest
            friendlyName: Windows
          - os: macos-latest
            friendlyName: macOS

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm ci
        name: Setup environment

      - run: npm run build
        name: Build native module from source

      - run: npm test
        name: Run tests (Windows/macOS)

      - run: npm run prebuild-napi-x64
        name: Prebuild (x64)

      - run: npm run prebuild-napi-arm64
        name: Prebuild (arm64)
        if: ${{ matrix.os != 'ubuntu-20.04' }}

      - run: npm run prebuild-napi-ia32
        if: ${{ matrix.os == 'windows-latest' }}
        name: Prebuild (Windows x86)

      - run: |
          mkdir -p prebuilds && chmod 777 prebuilds
          docker build -t node-fs-admin/i386 docker/i386
          docker run --rm -v ${PWD}:/project node-fs-admin/i386 /bin/bash -c "cd /project && npm run prebuild-napi-ia32 && rm -rf build"
          docker build -t node-fs-admin/arm64-cross-compile docker/arm64-cross-compile
          docker run --rm -v ${PWD}:/project node-fs-admin/arm64-cross-compile /bin/bash -c "cd /project && npm run prebuild-napi-arm64"
          docker build -t node-keytar/armv7l-cross-compile docker/armv7l-cross-compile
          docker run --rm -v ${PWD}:/project node-keytar/armv7l-cross-compile /bin/bash -c "cd /project && npm run prebuild-napi-armv7l"
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        name: Prebuild (Linux x86 + ARM64)

      - run: |
          ls prebuilds/@shiftkey/
        name: List prebuilds

      - name: Upload prebuilds to GitHub
        run: npm run upload
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Separate step for publishing to NPM so we're sure that generating + uploading prebuilds worked on all platforms
  npm-publish:
    needs: build
    name: Publish to NPM
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: "https://registry.npmjs.org"

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: sudo apt-get install libsecret-1-dev
        name: Install additional dependencies

      - run: npm ci
        name: Setup environment

      - run: npm publish --access public
        name: Upload to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
